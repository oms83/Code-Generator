
using System;
using System.Data;

public class clsUsers
{
                                        
        
        public static int AddNewPerson( int UserID,  int PersonID,  string UserName,  string Password,  bool IsActive)
        {
            SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

            int UserID = -1;

            string Query = @"INSERT INTO Users(
                                             
						PersonID,  
						UserName,  
						Password,  
						IsActive
                                        )
                                        VALUES
                                        (
                                                @PersonID,  
						@UserName,  
						@Password,  
						@IsActive 
						
                                        );
                                        SELECT_SCOPE_IDENTITY();
                                        ";
            
            SqlCommand Command = new SqlCommand(Query, Connection);

            
            Command.Parameters.AddWithValue("@PersonID", PersonID);
                        
            
            Command.Parameters.AddWithValue("@UserName", UserName);
                        
            
            Command.Parameters.AddWithValue("@Password", Password);
                        
            
            Command.Parameters.AddWithValue("@IsActive", IsActive);
                        
            


            /*
             
                ExecuteScalar() method in C# executes a SQL query against the database and returns the value of the first column 
                of the first row in the result set. It's commonly used for queries that return a single value, such as 
                aggregate functions (COUNT, MAX, MIN, SUM, AVG, etc.) or queries that return a single value.

                For example, you can use a query like SELECT COUNT(*) FROM TableName to get the total number of rows in a table, 
                and then use the ExecuteScalar() method to execute this query and retrieve the result. In this case, 
                the returned value will be the total row count.

            */

            try
            {
                Connection.Open();

                object Result = Command.ExecuteScalar();

                if (Result != null && int.TryParse(Result.ToString(), out int InsertedID))
                {
                    UserID = InsertedID;
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {
                Connection.Close();
            }
            return UserID;
        }
        
        
    public static bool GetUsersInfoByUserID(int UserID, ref  int PersonID, ref  string UserName, ref  string Password, ref  bool IsActive)
    {
        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = @"SELECT * FROM Users WHERE UserID = @UserID";

        // Command: It is used to execute queries to perform database operations
        SqlCommand Command = new SqlCommand(Query, connection);

        Command.Parameters.AddWithValue("@UserID", UserID);

        bool isFound = false;
        try
        {
            connection.Open();

            SqlDataReader Reader = Command.ExecuteReader();

            if (Reader.Read())
            {
                isFound = true;

                PersonID = (int)Reader["PersonID"]; 
		UserName = (string)Reader["UserName"]; 
		Password = (string)Reader["Password"]; 
		IsActive = (bool)Reader["IsActive"]; 
		

                Reader.Close();
            }
        }
        catch (Exception ex)
        {
        }
        finally
        {
            connection.Close();
        }

        return isFound;
    }
                    
    public bool IsUsersExistByUserID(int UserID)
    {
        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = "SELECT Found = 1 FROM Users WHERE UserID = @UserID";

        // Command: It is used to execute queries to perform database operations
        SqlCommand Command = new SqlCommand(Query, Connection);

        Command.Parameters.AddWithValue("@UserID", UserID);

        bool IsExist = false;

        try
        {
            Connection.Open();

            SqlDataReader Reader = Command.ExecuteReader();

            IsExist = Reader.HasRows;

            Reader.Close();

        }
        catch (Exception ex)
        {

        }
        finally
        {
            Connection.Close();
        }

        return IsExist;
    }
        
        
        public static bool UpdateUsers( int UserID,  int PersonID,  string UserName,  string Password,  bool IsActive)
        {
            SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

            string Query = @"UPDATE Users 
                             SET
                                PersonID = @PersonID,
				UserName = @UserName,
				Password = @Password,
				IsActive = @IsActive
				
                             WHERE
                             UserID = @UserID;
                            ";

            SqlCommand Command = new SqlCommand(Query, Connection);
            
            
            Command.Parameters.AddWithValue("@UserID", UserID);
                        
            
            Command.Parameters.AddWithValue("@PersonID", PersonID);
                        
            
            Command.Parameters.AddWithValue("@UserName", UserName);
                        
            
            Command.Parameters.AddWithValue("@Password", Password);
                        
            
            Command.Parameters.AddWithValue("@IsActive", IsActive);
                        
            

            int AffectedRows = -1;

            try
            {
                Connection.Open();
                AffectedRows = Command.ExecuteNonQuery();
            }
            catch (Exception ex) 
            {

            }
            finally
            {
                Connection.Close();
            }
            return (AffectedRows > 0);
        }
        

    public static DataTable GetAllUsers()
    {
        DataTable dataTable = new DataTable();

        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = @"SELECT * FROM Users;";

        // Command: It is used to execute queries to perform database operations.
        SqlCommand Command = new SqlCommand(Query, Connection);

        try
        {
            Connection.Open();

            // DataReader: It is used to read data from data source.
            // The DbDataReader is a base class for all DataReader objects.

            SqlDataReader Reader = Command.ExecuteReader();

            if (Reader.HasRows)
            {
                dataTable.Load(Reader);
            }

            Reader.Close();
        }
        catch (Exception ex)
        {

        }
        finally
        {
            Connection.Close();
        }

        return dataTable;
    }

                    
}
                