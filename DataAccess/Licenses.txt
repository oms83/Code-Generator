
using System;
using System.Data;

public class clsLicenses
{
                                        
        
        public static int AddNewPerson( int LicenseID,  int ApplicationID,  int DriverID,  int LicenseClass,  DateTime IssueDate,  DateTime ExpirationDate,  string Notes,  decimal PaidFees,  bool IsActive,  byte IssueReason,  int CreatedByUserID)
        {
            SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

            int LicenseID = -1;

            string Query = @"INSERT INTO Licenses(
                                             
						ApplicationID,  
						DriverID,  
						LicenseClass,  
						IssueDate,  
						ExpirationDate,  
						Notes,  
						PaidFees,  
						IsActive,  
						IssueReason,  
						CreatedByUserID
                                        )
                                        VALUES
                                        (
                                                @ApplicationID,  
						@DriverID,  
						@LicenseClass,  
						@IssueDate,  
						@ExpirationDate,  
						@Notes,  
						@PaidFees,  
						@IsActive,  
						@IssueReason,  
						@CreatedByUserID 
						
                                        );
                                        SELECT_SCOPE_IDENTITY();
                                        ";
            
            SqlCommand Command = new SqlCommand(Query, Connection);

            
            Command.Parameters.AddWithValue("@ApplicationID", ApplicationID);
                        
            
            Command.Parameters.AddWithValue("@DriverID", DriverID);
                        
            
            Command.Parameters.AddWithValue("@LicenseClass", LicenseClass);
                        
            
            Command.Parameters.AddWithValue("@IssueDate", IssueDate);
                        
            
            Command.Parameters.AddWithValue("@ExpirationDate", ExpirationDate);
                        
            
            if (Notes != null || Notes != string.Empty)
                Command.Parameters.AddWithValue("@Notes", Notes);
            else
                Command.Parameters.AddWithValue("@Notes", System.DBNull.Value);
                    
            
            Command.Parameters.AddWithValue("@PaidFees", PaidFees);
                        
            
            Command.Parameters.AddWithValue("@IsActive", IsActive);
                        
            
            Command.Parameters.AddWithValue("@IssueReason", IssueReason);
                        
            
            Command.Parameters.AddWithValue("@CreatedByUserID", CreatedByUserID);
                        
            


            /*
             
                ExecuteScalar() method in C# executes a SQL query against the database and returns the value of the first column 
                of the first row in the result set. It's commonly used for queries that return a single value, such as 
                aggregate functions (COUNT, MAX, MIN, SUM, AVG, etc.) or queries that return a single value.

                For example, you can use a query like SELECT COUNT(*) FROM TableName to get the total number of rows in a table, 
                and then use the ExecuteScalar() method to execute this query and retrieve the result. In this case, 
                the returned value will be the total row count.

            */

            try
            {
                Connection.Open();

                object Result = Command.ExecuteScalar();

                if (Result != null && int.TryParse(Result.ToString(), out int InsertedID))
                {
                    LicenseID = InsertedID;
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {
                Connection.Close();
            }
            return LicenseID;
        }
        
        
    public static bool GetLicensesInfoByLicenseID(int LicenseID, ref  int ApplicationID, ref  int DriverID, ref  int LicenseClass, ref  DateTime IssueDate, ref  DateTime ExpirationDate, ref  string Notes, ref  decimal PaidFees, ref  bool IsActive, ref  byte IssueReason, ref  int CreatedByUserID)
    {
        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = @"SELECT * FROM Licenses WHERE LicenseID = @LicenseID";

        // Command: It is used to execute queries to perform database operations
        SqlCommand Command = new SqlCommand(Query, connection);

        Command.Parameters.AddWithValue("@LicenseID", LicenseID);

        bool isFound = false;
        try
        {
            connection.Open();

            SqlDataReader Reader = Command.ExecuteReader();

            if (Reader.Read())
            {
                isFound = true;

                ApplicationID = (int)Reader["ApplicationID"]; 
		DriverID = (int)Reader["DriverID"]; 
		LicenseClass = (int)Reader["LicenseClass"]; 
		IssueDate = (DateTime)Reader["IssueDate"]; 
		ExpirationDate = (DateTime)Reader["ExpirationDate"]; 
		
                
                if (reader["Notes"] != DBNull.Value)
                {
                    Notes = (string)reader["Notes"];
                }
                else
                {
                    Notes = string.Empty;
                }
                
                    PaidFees = (decimal)Reader["PaidFees"]; 
		IsActive = (bool)Reader["IsActive"]; 
		IssueReason = (byte)Reader["IssueReason"]; 
		CreatedByUserID = (int)Reader["CreatedByUserID"]; 
		

                Reader.Close();
            }
        }
        catch (Exception ex)
        {
        }
        finally
        {
            connection.Close();
        }

        return isFound;
    }
                    
    public bool IsLicensesExistByLicenseID(int LicenseID)
    {
        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = "SELECT Found = 1 FROM Licenses WHERE LicenseID = @LicenseID";

        // Command: It is used to execute queries to perform database operations
        SqlCommand Command = new SqlCommand(Query, Connection);

        Command.Parameters.AddWithValue("@LicenseID", LicenseID);

        bool IsExist = false;

        try
        {
            Connection.Open();

            SqlDataReader Reader = Command.ExecuteReader();

            IsExist = Reader.HasRows;

            Reader.Close();

        }
        catch (Exception ex)
        {

        }
        finally
        {
            Connection.Close();
        }

        return IsExist;
    }
        
        
        public static bool UpdateLicenses( int LicenseID,  int ApplicationID,  int DriverID,  int LicenseClass,  DateTime IssueDate,  DateTime ExpirationDate,  string Notes,  decimal PaidFees,  bool IsActive,  byte IssueReason,  int CreatedByUserID)
        {
            SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

            string Query = @"UPDATE Licenses 
                             SET
                                ApplicationID = @ApplicationID,
				DriverID = @DriverID,
				LicenseClass = @LicenseClass,
				IssueDate = @IssueDate,
				ExpirationDate = @ExpirationDate,
				Notes = @Notes,
				PaidFees = @PaidFees,
				IsActive = @IsActive,
				IssueReason = @IssueReason,
				CreatedByUserID = @CreatedByUserID
				
                             WHERE
                             LicenseID = @LicenseID;
                            ";

            SqlCommand Command = new SqlCommand(Query, Connection);
            
            
            Command.Parameters.AddWithValue("@LicenseID", LicenseID);
                        
            
            Command.Parameters.AddWithValue("@ApplicationID", ApplicationID);
                        
            
            Command.Parameters.AddWithValue("@DriverID", DriverID);
                        
            
            Command.Parameters.AddWithValue("@LicenseClass", LicenseClass);
                        
            
            Command.Parameters.AddWithValue("@IssueDate", IssueDate);
                        
            
            Command.Parameters.AddWithValue("@ExpirationDate", ExpirationDate);
                        
            
            if (Notes != null || Notes != string.Empty)
                Command.Parameters.AddWithValue("@Notes", Notes);
            else
                Command.Parameters.AddWithValue("@Notes", System.DBNull.Value);
                    
            
            Command.Parameters.AddWithValue("@PaidFees", PaidFees);
                        
            
            Command.Parameters.AddWithValue("@IsActive", IsActive);
                        
            
            Command.Parameters.AddWithValue("@IssueReason", IssueReason);
                        
            
            Command.Parameters.AddWithValue("@CreatedByUserID", CreatedByUserID);
                        
            

            int AffectedRows = -1;

            try
            {
                Connection.Open();
                AffectedRows = Command.ExecuteNonQuery();
            }
            catch (Exception ex) 
            {

            }
            finally
            {
                Connection.Close();
            }
            return (AffectedRows > 0);
        }
        

    public static DataTable GetAllLicenses()
    {
        DataTable dataTable = new DataTable();

        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = @"SELECT * FROM Licenses;";

        // Command: It is used to execute queries to perform database operations.
        SqlCommand Command = new SqlCommand(Query, Connection);

        try
        {
            Connection.Open();

            // DataReader: It is used to read data from data source.
            // The DbDataReader is a base class for all DataReader objects.

            SqlDataReader Reader = Command.ExecuteReader();

            if (Reader.HasRows)
            {
                dataTable.Load(Reader);
            }

            Reader.Close();
        }
        catch (Exception ex)
        {

        }
        finally
        {
            Connection.Close();
        }

        return dataTable;
    }

                    
}
                