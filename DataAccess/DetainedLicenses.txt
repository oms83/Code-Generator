
using System;
using System.Data;

public class clsDetainedLicenses
{
                                        
        
        public static int AddNewPerson( int DetainID,  int LicenseID,  object DetainDate,  decimal FineFees,  int CreatedByUserID,  bool IsReleased,  object ReleaseDate,  int ReleasedByUserID,  int ReleaseApplicationID)
        {
            SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

            int DetainID = -1;

            string Query = @"INSERT INTO DetainedLicenses(
                                             
						LicenseID,  
						DetainDate,  
						FineFees,  
						CreatedByUserID,  
						IsReleased,  
						ReleaseDate,  
						ReleasedByUserID,  
						ReleaseApplicationID
                                        )
                                        VALUES
                                        (
                                                @LicenseID,  
						@DetainDate,  
						@FineFees,  
						@CreatedByUserID,  
						@IsReleased,  
						@ReleaseDate,  
						@ReleasedByUserID,  
						@ReleaseApplicationID 
						
                                        );
                                        SELECT_SCOPE_IDENTITY();
                                        ";
            
            SqlCommand Command = new SqlCommand(Query, Connection);

            
            Command.Parameters.AddWithValue("@LicenseID", LicenseID);
                        
            
            Command.Parameters.AddWithValue("@DetainDate", DetainDate);
                        
            
            Command.Parameters.AddWithValue("@FineFees", FineFees);
                        
            
            Command.Parameters.AddWithValue("@CreatedByUserID", CreatedByUserID);
                        
            
            Command.Parameters.AddWithValue("@IsReleased", IsReleased);
                        
            
            if (ReleaseDate != null || ReleaseDate != null)
                Command.Parameters.AddWithValue("@ReleaseDate", ReleaseDate);
            else
                Command.Parameters.AddWithValue("@ReleaseDate", System.DBNull.Value);
                    
            
            if (ReleasedByUserID != null || ReleasedByUserID != -1)
                Command.Parameters.AddWithValue("@ReleasedByUserID", ReleasedByUserID);
            else
                Command.Parameters.AddWithValue("@ReleasedByUserID", System.DBNull.Value);
                    
            
            if (ReleaseApplicationID != null || ReleaseApplicationID != -1)
                Command.Parameters.AddWithValue("@ReleaseApplicationID", ReleaseApplicationID);
            else
                Command.Parameters.AddWithValue("@ReleaseApplicationID", System.DBNull.Value);
                    
            


            /*
             
                ExecuteScalar() method in C# executes a SQL query against the database and returns the value of the first column 
                of the first row in the result set. It's commonly used for queries that return a single value, such as 
                aggregate functions (COUNT, MAX, MIN, SUM, AVG, etc.) or queries that return a single value.

                For example, you can use a query like SELECT COUNT(*) FROM TableName to get the total number of rows in a table, 
                and then use the ExecuteScalar() method to execute this query and retrieve the result. In this case, 
                the returned value will be the total row count.

            */

            try
            {
                Connection.Open();

                object Result = Command.ExecuteScalar();

                if (Result != null && int.TryParse(Result.ToString(), out int InsertedID))
                {
                    DetainID = InsertedID;
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {
                Connection.Close();
            }
            return DetainID;
        }
        
        
    public static bool GetDetainedLicensesInfoByDetainID(int DetainID, ref  int LicenseID, ref  object DetainDate, ref  decimal FineFees, ref  int CreatedByUserID, ref  bool IsReleased, ref  object ReleaseDate, ref  int ReleasedByUserID, ref  int ReleaseApplicationID)
    {
        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = @"SELECT * FROM DetainedLicenses WHERE DetainID = @DetainID";

        // Command: It is used to execute queries to perform database operations
        SqlCommand Command = new SqlCommand(Query, connection);

        Command.Parameters.AddWithValue("@DetainID", DetainID);

        bool isFound = false;
        try
        {
            connection.Open();

            SqlDataReader Reader = Command.ExecuteReader();

            if (Reader.Read())
            {
                isFound = true;

                LicenseID = (int)Reader["LicenseID"]; 
		DetainDate = (object)Reader["DetainDate"]; 
		FineFees = (decimal)Reader["FineFees"]; 
		CreatedByUserID = (int)Reader["CreatedByUserID"]; 
		IsReleased = (bool)Reader["IsReleased"]; 
		
                
                if (reader["ReleaseDate"] != DBNull.Value)
                {
                    ReleaseDate = (object)reader["ReleaseDate"];
                }
                else
                {
                    ReleaseDate = null;
                }
                
                    
                
                if (reader["ReleasedByUserID"] != DBNull.Value)
                {
                    ReleasedByUserID = (int)reader["ReleasedByUserID"];
                }
                else
                {
                    ReleasedByUserID = -1;
                }
                
                    
                
                if (reader["ReleaseApplicationID"] != DBNull.Value)
                {
                    ReleaseApplicationID = (int)reader["ReleaseApplicationID"];
                }
                else
                {
                    ReleaseApplicationID = -1;
                }
                
                    

                Reader.Close();
            }
        }
        catch (Exception ex)
        {
        }
        finally
        {
            connection.Close();
        }

        return isFound;
    }
                    
    public bool IsDetainedLicensesExistByDetainID(int DetainID)
    {
        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = "SELECT Found = 1 FROM DetainedLicenses WHERE DetainID = @DetainID";

        // Command: It is used to execute queries to perform database operations
        SqlCommand Command = new SqlCommand(Query, Connection);

        Command.Parameters.AddWithValue("@DetainID", DetainID);

        bool IsExist = false;

        try
        {
            Connection.Open();

            SqlDataReader Reader = Command.ExecuteReader();

            IsExist = Reader.HasRows;

            Reader.Close();

        }
        catch (Exception ex)
        {

        }
        finally
        {
            Connection.Close();
        }

        return IsExist;
    }
        
        
        public static bool UpdateDetainedLicenses( int DetainID,  int LicenseID,  object DetainDate,  decimal FineFees,  int CreatedByUserID,  bool IsReleased,  object ReleaseDate,  int ReleasedByUserID,  int ReleaseApplicationID)
        {
            SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

            string Query = @"UPDATE DetainedLicenses 
                             SET
                                LicenseID = @LicenseID,
				DetainDate = @DetainDate,
				FineFees = @FineFees,
				CreatedByUserID = @CreatedByUserID,
				IsReleased = @IsReleased,
				ReleaseDate = @ReleaseDate,
				ReleasedByUserID = @ReleasedByUserID,
				ReleaseApplicationID = @ReleaseApplicationID
				
                             WHERE
                             DetainID = @DetainID;
                            ";

            SqlCommand Command = new SqlCommand(Query, Connection);
            
            
            Command.Parameters.AddWithValue("@DetainID", DetainID);
                        
            
            Command.Parameters.AddWithValue("@LicenseID", LicenseID);
                        
            
            Command.Parameters.AddWithValue("@DetainDate", DetainDate);
                        
            
            Command.Parameters.AddWithValue("@FineFees", FineFees);
                        
            
            Command.Parameters.AddWithValue("@CreatedByUserID", CreatedByUserID);
                        
            
            Command.Parameters.AddWithValue("@IsReleased", IsReleased);
                        
            
            if (ReleaseDate != null || ReleaseDate != null)
                Command.Parameters.AddWithValue("@ReleaseDate", ReleaseDate);
            else
                Command.Parameters.AddWithValue("@ReleaseDate", System.DBNull.Value);
                    
            
            if (ReleasedByUserID != null || ReleasedByUserID != -1)
                Command.Parameters.AddWithValue("@ReleasedByUserID", ReleasedByUserID);
            else
                Command.Parameters.AddWithValue("@ReleasedByUserID", System.DBNull.Value);
                    
            
            if (ReleaseApplicationID != null || ReleaseApplicationID != -1)
                Command.Parameters.AddWithValue("@ReleaseApplicationID", ReleaseApplicationID);
            else
                Command.Parameters.AddWithValue("@ReleaseApplicationID", System.DBNull.Value);
                    
            

            int AffectedRows = -1;

            try
            {
                Connection.Open();
                AffectedRows = Command.ExecuteNonQuery();
            }
            catch (Exception ex) 
            {

            }
            finally
            {
                Connection.Close();
            }
            return (AffectedRows > 0);
        }
        

    public static DataTable GetAllDetainedLicenses()
    {
        DataTable dataTable = new DataTable();

        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = @"SELECT * FROM DetainedLicenses;";

        // Command: It is used to execute queries to perform database operations.
        SqlCommand Command = new SqlCommand(Query, Connection);

        try
        {
            Connection.Open();

            // DataReader: It is used to read data from data source.
            // The DbDataReader is a base class for all DataReader objects.

            SqlDataReader Reader = Command.ExecuteReader();

            if (Reader.HasRows)
            {
                dataTable.Load(Reader);
            }

            Reader.Close();
        }
        catch (Exception ex)
        {

        }
        finally
        {
            Connection.Close();
        }

        return dataTable;
    }

                    
}
                