
using System;
using System.Data;

public class clsTestTypes
{
                                        
        
        public static int AddNewPerson( int TestTypeID,  string TestTypeTitle,  string TestTypeDescription,  decimal TestTypeFees)
        {
            SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

            int TestTypeID = -1;

            string Query = @"INSERT INTO TestTypes(
                                             
						TestTypeTitle,  
						TestTypeDescription,  
						TestTypeFees
                                        )
                                        VALUES
                                        (
                                                @TestTypeTitle,  
						@TestTypeDescription,  
						@TestTypeFees 
						
                                        );
                                        SELECT_SCOPE_IDENTITY();
                                        ";
            
            SqlCommand Command = new SqlCommand(Query, Connection);

            
            Command.Parameters.AddWithValue("@TestTypeTitle", TestTypeTitle);
                        
            
            Command.Parameters.AddWithValue("@TestTypeDescription", TestTypeDescription);
                        
            
            Command.Parameters.AddWithValue("@TestTypeFees", TestTypeFees);
                        
            


            /*
             
                ExecuteScalar() method in C# executes a SQL query against the database and returns the value of the first column 
                of the first row in the result set. It's commonly used for queries that return a single value, such as 
                aggregate functions (COUNT, MAX, MIN, SUM, AVG, etc.) or queries that return a single value.

                For example, you can use a query like SELECT COUNT(*) FROM TableName to get the total number of rows in a table, 
                and then use the ExecuteScalar() method to execute this query and retrieve the result. In this case, 
                the returned value will be the total row count.

            */

            try
            {
                Connection.Open();

                object Result = Command.ExecuteScalar();

                if (Result != null && int.TryParse(Result.ToString(), out int InsertedID))
                {
                    TestTypeID = InsertedID;
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {
                Connection.Close();
            }
            return TestTypeID;
        }
        
        
    public static bool GetTestTypesInfoByTestTypeID(int TestTypeID, ref  string TestTypeTitle, ref  string TestTypeDescription, ref  decimal TestTypeFees)
    {
        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = @"SELECT * FROM TestTypes WHERE TestTypeID = @TestTypeID";

        // Command: It is used to execute queries to perform database operations
        SqlCommand Command = new SqlCommand(Query, connection);

        Command.Parameters.AddWithValue("@TestTypeID", TestTypeID);

        bool isFound = false;
        try
        {
            connection.Open();

            SqlDataReader Reader = Command.ExecuteReader();

            if (Reader.Read())
            {
                isFound = true;

                TestTypeTitle = (string)Reader["TestTypeTitle"]; 
		TestTypeDescription = (string)Reader["TestTypeDescription"]; 
		TestTypeFees = (decimal)Reader["TestTypeFees"]; 
		

                Reader.Close();
            }
        }
        catch (Exception ex)
        {
        }
        finally
        {
            connection.Close();
        }

        return isFound;
    }
                    
    public bool IsTestTypesExistByTestTypeID(int TestTypeID)
    {
        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = "SELECT Found = 1 FROM TestTypes WHERE TestTypeID = @TestTypeID";

        // Command: It is used to execute queries to perform database operations
        SqlCommand Command = new SqlCommand(Query, Connection);

        Command.Parameters.AddWithValue("@TestTypeID", TestTypeID);

        bool IsExist = false;

        try
        {
            Connection.Open();

            SqlDataReader Reader = Command.ExecuteReader();

            IsExist = Reader.HasRows;

            Reader.Close();

        }
        catch (Exception ex)
        {

        }
        finally
        {
            Connection.Close();
        }

        return IsExist;
    }
        
        
        public static bool UpdateTestTypes( int TestTypeID,  string TestTypeTitle,  string TestTypeDescription,  decimal TestTypeFees)
        {
            SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

            string Query = @"UPDATE TestTypes 
                             SET
                                TestTypeTitle = @TestTypeTitle,
				TestTypeDescription = @TestTypeDescription,
				TestTypeFees = @TestTypeFees
				
                             WHERE
                             TestTypeID = @TestTypeID;
                            ";

            SqlCommand Command = new SqlCommand(Query, Connection);
            
            
            Command.Parameters.AddWithValue("@TestTypeID", TestTypeID);
                        
            
            Command.Parameters.AddWithValue("@TestTypeTitle", TestTypeTitle);
                        
            
            Command.Parameters.AddWithValue("@TestTypeDescription", TestTypeDescription);
                        
            
            Command.Parameters.AddWithValue("@TestTypeFees", TestTypeFees);
                        
            

            int AffectedRows = -1;

            try
            {
                Connection.Open();
                AffectedRows = Command.ExecuteNonQuery();
            }
            catch (Exception ex) 
            {

            }
            finally
            {
                Connection.Close();
            }
            return (AffectedRows > 0);
        }
        

    public static DataTable GetAllTestTypes()
    {
        DataTable dataTable = new DataTable();

        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = @"SELECT * FROM TestTypes;";

        // Command: It is used to execute queries to perform database operations.
        SqlCommand Command = new SqlCommand(Query, Connection);

        try
        {
            Connection.Open();

            // DataReader: It is used to read data from data source.
            // The DbDataReader is a base class for all DataReader objects.

            SqlDataReader Reader = Command.ExecuteReader();

            if (Reader.HasRows)
            {
                dataTable.Load(Reader);
            }

            Reader.Close();
        }
        catch (Exception ex)
        {

        }
        finally
        {
            Connection.Close();
        }

        return dataTable;
    }

                    
}
                