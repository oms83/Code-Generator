
using System;
using System.Data;

public class clsTests
{
                                        
        
        public static int AddNewPerson( int TestID,  int TestAppointmentID,  bool TestResult,  string Notes,  int CreatedByUserID)
        {
            SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

            int TestID = -1;

            string Query = @"INSERT INTO Tests(
                                             
						TestAppointmentID,  
						TestResult,  
						Notes,  
						CreatedByUserID
                                        )
                                        VALUES
                                        (
                                                @TestAppointmentID,  
						@TestResult,  
						@Notes,  
						@CreatedByUserID 
						
                                        );
                                        SELECT_SCOPE_IDENTITY();
                                        ";
            
            SqlCommand Command = new SqlCommand(Query, Connection);

            
            Command.Parameters.AddWithValue("@TestAppointmentID", TestAppointmentID);
                        
            
            Command.Parameters.AddWithValue("@TestResult", TestResult);
                        
            
            if (Notes != null || Notes != string.Empty)
                Command.Parameters.AddWithValue("@Notes", Notes);
            else
                Command.Parameters.AddWithValue("@Notes", System.DBNull.Value);
                    
            
            Command.Parameters.AddWithValue("@CreatedByUserID", CreatedByUserID);
                        
            


            /*
             
                ExecuteScalar() method in C# executes a SQL query against the database and returns the value of the first column 
                of the first row in the result set. It's commonly used for queries that return a single value, such as 
                aggregate functions (COUNT, MAX, MIN, SUM, AVG, etc.) or queries that return a single value.

                For example, you can use a query like SELECT COUNT(*) FROM TableName to get the total number of rows in a table, 
                and then use the ExecuteScalar() method to execute this query and retrieve the result. In this case, 
                the returned value will be the total row count.

            */

            try
            {
                Connection.Open();

                object Result = Command.ExecuteScalar();

                if (Result != null && int.TryParse(Result.ToString(), out int InsertedID))
                {
                    TestID = InsertedID;
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {
                Connection.Close();
            }
            return TestID;
        }
        
        
    public static bool GetTestsInfoByTestID(int TestID, ref  int TestAppointmentID, ref  bool TestResult, ref  string Notes, ref  int CreatedByUserID)
    {
        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = @"SELECT * FROM Tests WHERE TestID = @TestID";

        // Command: It is used to execute queries to perform database operations
        SqlCommand Command = new SqlCommand(Query, connection);

        Command.Parameters.AddWithValue("@TestID", TestID);

        bool isFound = false;
        try
        {
            connection.Open();

            SqlDataReader Reader = Command.ExecuteReader();

            if (Reader.Read())
            {
                isFound = true;

                TestAppointmentID = (int)Reader["TestAppointmentID"]; 
		TestResult = (bool)Reader["TestResult"]; 
		
                
                if (reader["Notes"] != DBNull.Value)
                {
                    Notes = (string)reader["Notes"];
                }
                else
                {
                    Notes = string.Empty;
                }
                
                    CreatedByUserID = (int)Reader["CreatedByUserID"]; 
		

                Reader.Close();
            }
        }
        catch (Exception ex)
        {
        }
        finally
        {
            connection.Close();
        }

        return isFound;
    }
                    
    public bool IsTestsExistByTestID(int TestID)
    {
        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = "SELECT Found = 1 FROM Tests WHERE TestID = @TestID";

        // Command: It is used to execute queries to perform database operations
        SqlCommand Command = new SqlCommand(Query, Connection);

        Command.Parameters.AddWithValue("@TestID", TestID);

        bool IsExist = false;

        try
        {
            Connection.Open();

            SqlDataReader Reader = Command.ExecuteReader();

            IsExist = Reader.HasRows;

            Reader.Close();

        }
        catch (Exception ex)
        {

        }
        finally
        {
            Connection.Close();
        }

        return IsExist;
    }
        
        
        public static bool UpdateTests( int TestID,  int TestAppointmentID,  bool TestResult,  string Notes,  int CreatedByUserID)
        {
            SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

            string Query = @"UPDATE Tests 
                             SET
                                TestAppointmentID = @TestAppointmentID,
				TestResult = @TestResult,
				Notes = @Notes,
				CreatedByUserID = @CreatedByUserID
				
                             WHERE
                             TestID = @TestID;
                            ";

            SqlCommand Command = new SqlCommand(Query, Connection);
            
            
            Command.Parameters.AddWithValue("@TestID", TestID);
                        
            
            Command.Parameters.AddWithValue("@TestAppointmentID", TestAppointmentID);
                        
            
            Command.Parameters.AddWithValue("@TestResult", TestResult);
                        
            
            if (Notes != null || Notes != string.Empty)
                Command.Parameters.AddWithValue("@Notes", Notes);
            else
                Command.Parameters.AddWithValue("@Notes", System.DBNull.Value);
                    
            
            Command.Parameters.AddWithValue("@CreatedByUserID", CreatedByUserID);
                        
            

            int AffectedRows = -1;

            try
            {
                Connection.Open();
                AffectedRows = Command.ExecuteNonQuery();
            }
            catch (Exception ex) 
            {

            }
            finally
            {
                Connection.Close();
            }
            return (AffectedRows > 0);
        }
        

    public static DataTable GetAllTests()
    {
        DataTable dataTable = new DataTable();

        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = @"SELECT * FROM Tests;";

        // Command: It is used to execute queries to perform database operations.
        SqlCommand Command = new SqlCommand(Query, Connection);

        try
        {
            Connection.Open();

            // DataReader: It is used to read data from data source.
            // The DbDataReader is a base class for all DataReader objects.

            SqlDataReader Reader = Command.ExecuteReader();

            if (Reader.HasRows)
            {
                dataTable.Load(Reader);
            }

            Reader.Close();
        }
        catch (Exception ex)
        {

        }
        finally
        {
            Connection.Close();
        }

        return dataTable;
    }

                    
}
                