
using System;
using System.Data;

public class clsInternationalLicenses
{
                                        
        
        public static int AddNewPerson( int InternationalLicenseID,  int ApplicationID,  int DriverID,  int IssuedUsingLocalLicenseID,  object IssueDate,  object ExpirationDate,  bool IsActive,  int CreatedByUserID)
        {
            SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

            int InternationalLicenseID = -1;

            string Query = @"INSERT INTO InternationalLicenses(
                                             
						ApplicationID,  
						DriverID,  
						IssuedUsingLocalLicenseID,  
						IssueDate,  
						ExpirationDate,  
						IsActive,  
						CreatedByUserID
                                        )
                                        VALUES
                                        (
                                                @ApplicationID,  
						@DriverID,  
						@IssuedUsingLocalLicenseID,  
						@IssueDate,  
						@ExpirationDate,  
						@IsActive,  
						@CreatedByUserID 
						
                                        );
                                        SELECT_SCOPE_IDENTITY();
                                        ";
            
            SqlCommand Command = new SqlCommand(Query, Connection);

            
            Command.Parameters.AddWithValue("@ApplicationID", ApplicationID);
                        
            
            Command.Parameters.AddWithValue("@DriverID", DriverID);
                        
            
            Command.Parameters.AddWithValue("@IssuedUsingLocalLicenseID", IssuedUsingLocalLicenseID);
                        
            
            Command.Parameters.AddWithValue("@IssueDate", IssueDate);
                        
            
            Command.Parameters.AddWithValue("@ExpirationDate", ExpirationDate);
                        
            
            Command.Parameters.AddWithValue("@IsActive", IsActive);
                        
            
            Command.Parameters.AddWithValue("@CreatedByUserID", CreatedByUserID);
                        
            


            /*
             
                ExecuteScalar() method in C# executes a SQL query against the database and returns the value of the first column 
                of the first row in the result set. It's commonly used for queries that return a single value, such as 
                aggregate functions (COUNT, MAX, MIN, SUM, AVG, etc.) or queries that return a single value.

                For example, you can use a query like SELECT COUNT(*) FROM TableName to get the total number of rows in a table, 
                and then use the ExecuteScalar() method to execute this query and retrieve the result. In this case, 
                the returned value will be the total row count.

            */

            try
            {
                Connection.Open();

                object Result = Command.ExecuteScalar();

                if (Result != null && int.TryParse(Result.ToString(), out int InsertedID))
                {
                    InternationalLicenseID = InsertedID;
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {
                Connection.Close();
            }
            return InternationalLicenseID;
        }
        
        
    public static bool GetInternationalLicensesInfoByInternationalLicenseID(int InternationalLicenseID, ref  int ApplicationID, ref  int DriverID, ref  int IssuedUsingLocalLicenseID, ref  object IssueDate, ref  object ExpirationDate, ref  bool IsActive, ref  int CreatedByUserID)
    {
        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = @"SELECT * FROM InternationalLicenses WHERE InternationalLicenseID = @InternationalLicenseID";

        // Command: It is used to execute queries to perform database operations
        SqlCommand Command = new SqlCommand(Query, connection);

        Command.Parameters.AddWithValue("@InternationalLicenseID", InternationalLicenseID);

        bool isFound = false;
        try
        {
            connection.Open();

            SqlDataReader Reader = Command.ExecuteReader();

            if (Reader.Read())
            {
                isFound = true;

                ApplicationID = (int)Reader["ApplicationID"]; 
		DriverID = (int)Reader["DriverID"]; 
		IssuedUsingLocalLicenseID = (int)Reader["IssuedUsingLocalLicenseID"]; 
		IssueDate = (object)Reader["IssueDate"]; 
		ExpirationDate = (object)Reader["ExpirationDate"]; 
		IsActive = (bool)Reader["IsActive"]; 
		CreatedByUserID = (int)Reader["CreatedByUserID"]; 
		

                Reader.Close();
            }
        }
        catch (Exception ex)
        {
        }
        finally
        {
            connection.Close();
        }

        return isFound;
    }
                    
    public bool IsInternationalLicensesExistByInternationalLicenseID(int InternationalLicenseID)
    {
        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = "SELECT Found = 1 FROM InternationalLicenses WHERE InternationalLicenseID = @InternationalLicenseID";

        // Command: It is used to execute queries to perform database operations
        SqlCommand Command = new SqlCommand(Query, Connection);

        Command.Parameters.AddWithValue("@InternationalLicenseID", InternationalLicenseID);

        bool IsExist = false;

        try
        {
            Connection.Open();

            SqlDataReader Reader = Command.ExecuteReader();

            IsExist = Reader.HasRows;

            Reader.Close();

        }
        catch (Exception ex)
        {

        }
        finally
        {
            Connection.Close();
        }

        return IsExist;
    }
        
        
        public static bool UpdateInternationalLicenses( int InternationalLicenseID,  int ApplicationID,  int DriverID,  int IssuedUsingLocalLicenseID,  object IssueDate,  object ExpirationDate,  bool IsActive,  int CreatedByUserID)
        {
            SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

            string Query = @"UPDATE InternationalLicenses 
                             SET
                                ApplicationID = @ApplicationID,
				DriverID = @DriverID,
				IssuedUsingLocalLicenseID = @IssuedUsingLocalLicenseID,
				IssueDate = @IssueDate,
				ExpirationDate = @ExpirationDate,
				IsActive = @IsActive,
				CreatedByUserID = @CreatedByUserID
				
                             WHERE
                             InternationalLicenseID = @InternationalLicenseID;
                            ";

            SqlCommand Command = new SqlCommand(Query, Connection);
            
            
            Command.Parameters.AddWithValue("@InternationalLicenseID", InternationalLicenseID);
                        
            
            Command.Parameters.AddWithValue("@ApplicationID", ApplicationID);
                        
            
            Command.Parameters.AddWithValue("@DriverID", DriverID);
                        
            
            Command.Parameters.AddWithValue("@IssuedUsingLocalLicenseID", IssuedUsingLocalLicenseID);
                        
            
            Command.Parameters.AddWithValue("@IssueDate", IssueDate);
                        
            
            Command.Parameters.AddWithValue("@ExpirationDate", ExpirationDate);
                        
            
            Command.Parameters.AddWithValue("@IsActive", IsActive);
                        
            
            Command.Parameters.AddWithValue("@CreatedByUserID", CreatedByUserID);
                        
            

            int AffectedRows = -1;

            try
            {
                Connection.Open();
                AffectedRows = Command.ExecuteNonQuery();
            }
            catch (Exception ex) 
            {

            }
            finally
            {
                Connection.Close();
            }
            return (AffectedRows > 0);
        }
        

    public static DataTable GetAllInternationalLicenses()
    {
        DataTable dataTable = new DataTable();

        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = @"SELECT * FROM InternationalLicenses;";

        // Command: It is used to execute queries to perform database operations.
        SqlCommand Command = new SqlCommand(Query, Connection);

        try
        {
            Connection.Open();

            // DataReader: It is used to read data from data source.
            // The DbDataReader is a base class for all DataReader objects.

            SqlDataReader Reader = Command.ExecuteReader();

            if (Reader.HasRows)
            {
                dataTable.Load(Reader);
            }

            Reader.Close();
        }
        catch (Exception ex)
        {

        }
        finally
        {
            Connection.Close();
        }

        return dataTable;
    }

                    
}
                