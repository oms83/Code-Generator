
using System;
using System.Data;

public class clsPeople
{
                                        
        
        public static int AddNewPerson( int PersonID,  string NationalNo,  string FirstName,  string SecondName,  string ThirdName,  string LastName,  DateTime DateOfBirth,  byte Gender,  string Address,  string Phone,  string Email,  int NationalityCountryID,  string ImagePath)
        {
            SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

            int PersonID = -1;

            string Query = @"INSERT INTO People(
                                             
						NationalNo,  
						FirstName,  
						SecondName,  
						ThirdName,  
						LastName,  
						DateOfBirth,  
						Gender,  
						Address,  
						Phone,  
						Email,  
						NationalityCountryID,  
						ImagePath
                                        )
                                        VALUES
                                        (
                                                @NationalNo,  
						@FirstName,  
						@SecondName,  
						@ThirdName,  
						@LastName,  
						@DateOfBirth,  
						@Gender,  
						@Address,  
						@Phone,  
						@Email,  
						@NationalityCountryID,  
						@ImagePath 
						
                                        );
                                        SELECT_SCOPE_IDENTITY();
                                        ";
            
            SqlCommand Command = new SqlCommand(Query, Connection);

            
            Command.Parameters.AddWithValue("@NationalNo", NationalNo);
                        
            
            Command.Parameters.AddWithValue("@FirstName", FirstName);
                        
            
            Command.Parameters.AddWithValue("@SecondName", SecondName);
                        
            
            if (ThirdName != null || ThirdName != string.Empty)
                Command.Parameters.AddWithValue("@ThirdName", ThirdName);
            else
                Command.Parameters.AddWithValue("@ThirdName", System.DBNull.Value);
                    
            
            Command.Parameters.AddWithValue("@LastName", LastName);
                        
            
            Command.Parameters.AddWithValue("@DateOfBirth", DateOfBirth);
                        
            
            Command.Parameters.AddWithValue("@Gender", Gender);
                        
            
            Command.Parameters.AddWithValue("@Address", Address);
                        
            
            Command.Parameters.AddWithValue("@Phone", Phone);
                        
            
            if (Email != null || Email != string.Empty)
                Command.Parameters.AddWithValue("@Email", Email);
            else
                Command.Parameters.AddWithValue("@Email", System.DBNull.Value);
                    
            
            Command.Parameters.AddWithValue("@NationalityCountryID", NationalityCountryID);
                        
            
            if (ImagePath != null || ImagePath != string.Empty)
                Command.Parameters.AddWithValue("@ImagePath", ImagePath);
            else
                Command.Parameters.AddWithValue("@ImagePath", System.DBNull.Value);
                    
            


            /*
             
                ExecuteScalar() method in C# executes a SQL query against the database and returns the value of the first column 
                of the first row in the result set. It's commonly used for queries that return a single value, such as 
                aggregate functions (COUNT, MAX, MIN, SUM, AVG, etc.) or queries that return a single value.

                For example, you can use a query like SELECT COUNT(*) FROM TableName to get the total number of rows in a table, 
                and then use the ExecuteScalar() method to execute this query and retrieve the result. In this case, 
                the returned value will be the total row count.

            */

            try
            {
                Connection.Open();

                object Result = Command.ExecuteScalar();

                if (Result != null && int.TryParse(Result.ToString(), out int InsertedID))
                {
                    PersonID = InsertedID;
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {
                Connection.Close();
            }
            return PersonID;
        }
        
        
    public static bool GetPeopleInfoByPersonID(int PersonID, ref  string NationalNo, ref  string FirstName, ref  string SecondName, ref  string ThirdName, ref  string LastName, ref  DateTime DateOfBirth, ref  byte Gender, ref  string Address, ref  string Phone, ref  string Email, ref  int NationalityCountryID, ref  string ImagePath)
    {
        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = @"SELECT * FROM People WHERE PersonID = @PersonID";

        // Command: It is used to execute queries to perform database operations
        SqlCommand Command = new SqlCommand(Query, connection);

        Command.Parameters.AddWithValue("@PersonID", PersonID);

        bool isFound = false;
        try
        {
            connection.Open();

            SqlDataReader Reader = Command.ExecuteReader();

            if (Reader.Read())
            {
                isFound = true;

                NationalNo = (string)Reader["NationalNo"]; 
		FirstName = (string)Reader["FirstName"]; 
		SecondName = (string)Reader["SecondName"]; 
		
                
                if (reader["ThirdName"] != DBNull.Value)
                {
                    ThirdName = (string)reader["ThirdName"];
                }
                else
                {
                    ThirdName = string.Empty;
                }
                
                    LastName = (string)Reader["LastName"]; 
		DateOfBirth = (DateTime)Reader["DateOfBirth"]; 
		Gender = (byte)Reader["Gender"]; 
		Address = (string)Reader["Address"]; 
		Phone = (string)Reader["Phone"]; 
		
                
                if (reader["Email"] != DBNull.Value)
                {
                    Email = (string)reader["Email"];
                }
                else
                {
                    Email = string.Empty;
                }
                
                    NationalityCountryID = (int)Reader["NationalityCountryID"]; 
		
                
                if (reader["ImagePath"] != DBNull.Value)
                {
                    ImagePath = (string)reader["ImagePath"];
                }
                else
                {
                    ImagePath = string.Empty;
                }
                
                    

                Reader.Close();
            }
        }
        catch (Exception ex)
        {
        }
        finally
        {
            connection.Close();
        }

        return isFound;
    }
                    
    public bool IsPeopleExistByPersonID(int PersonID)
    {
        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = "SELECT Found = 1 FROM People WHERE PersonID = @PersonID";

        // Command: It is used to execute queries to perform database operations
        SqlCommand Command = new SqlCommand(Query, Connection);

        Command.Parameters.AddWithValue("@PersonID", PersonID);

        bool IsExist = false;

        try
        {
            Connection.Open();

            SqlDataReader Reader = Command.ExecuteReader();

            IsExist = Reader.HasRows;

            Reader.Close();

        }
        catch (Exception ex)
        {

        }
        finally
        {
            Connection.Close();
        }

        return IsExist;
    }
        
        
        public static bool UpdatePeople( int PersonID,  string NationalNo,  string FirstName,  string SecondName,  string ThirdName,  string LastName,  DateTime DateOfBirth,  byte Gender,  string Address,  string Phone,  string Email,  int NationalityCountryID,  string ImagePath)
        {
            SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

            string Query = @"UPDATE People 
                             SET
                                NationalNo = @NationalNo,
				FirstName = @FirstName,
				SecondName = @SecondName,
				ThirdName = @ThirdName,
				LastName = @LastName,
				DateOfBirth = @DateOfBirth,
				Gender = @Gender,
				Address = @Address,
				Phone = @Phone,
				Email = @Email,
				NationalityCountryID = @NationalityCountryID,
				ImagePath = @ImagePath
				
                             WHERE
                             PersonID = @PersonID;
                            ";

            SqlCommand Command = new SqlCommand(Query, Connection);
            
            
            Command.Parameters.AddWithValue("@PersonID", PersonID);
                        
            
            Command.Parameters.AddWithValue("@NationalNo", NationalNo);
                        
            
            Command.Parameters.AddWithValue("@FirstName", FirstName);
                        
            
            Command.Parameters.AddWithValue("@SecondName", SecondName);
                        
            
            if (ThirdName != null || ThirdName != string.Empty)
                Command.Parameters.AddWithValue("@ThirdName", ThirdName);
            else
                Command.Parameters.AddWithValue("@ThirdName", System.DBNull.Value);
                    
            
            Command.Parameters.AddWithValue("@LastName", LastName);
                        
            
            Command.Parameters.AddWithValue("@DateOfBirth", DateOfBirth);
                        
            
            Command.Parameters.AddWithValue("@Gender", Gender);
                        
            
            Command.Parameters.AddWithValue("@Address", Address);
                        
            
            Command.Parameters.AddWithValue("@Phone", Phone);
                        
            
            if (Email != null || Email != string.Empty)
                Command.Parameters.AddWithValue("@Email", Email);
            else
                Command.Parameters.AddWithValue("@Email", System.DBNull.Value);
                    
            
            Command.Parameters.AddWithValue("@NationalityCountryID", NationalityCountryID);
                        
            
            if (ImagePath != null || ImagePath != string.Empty)
                Command.Parameters.AddWithValue("@ImagePath", ImagePath);
            else
                Command.Parameters.AddWithValue("@ImagePath", System.DBNull.Value);
                    
            

            int AffectedRows = -1;

            try
            {
                Connection.Open();
                AffectedRows = Command.ExecuteNonQuery();
            }
            catch (Exception ex) 
            {

            }
            finally
            {
                Connection.Close();
            }
            return (AffectedRows > 0);
        }
        

    public static DataTable GetAllPeople()
    {
        DataTable dataTable = new DataTable();

        // Connection: It is used to establish a connection to a specific data source.
        SqlConnection Connection = new SqlConnection(clsDataAccessSettings.ConnectionString);

        string Query = @"SELECT * FROM People;";

        // Command: It is used to execute queries to perform database operations.
        SqlCommand Command = new SqlCommand(Query, Connection);

        try
        {
            Connection.Open();

            // DataReader: It is used to read data from data source.
            // The DbDataReader is a base class for all DataReader objects.

            SqlDataReader Reader = Command.ExecuteReader();

            if (Reader.HasRows)
            {
                dataTable.Load(Reader);
            }

            Reader.Close();
        }
        catch (Exception ex)
        {

        }
        finally
        {
            Connection.Close();
        }

        return dataTable;
    }

                    
}
                